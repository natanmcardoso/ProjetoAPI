#Criar um programa que:
#Pe√ßa um usu√°rio para digitar a quantidade de cachorros que ele deseja buscar.
#Crie um limitador para controlar o input do usu√°rio, n√£o deixe que ele digite mais do que 5
#Fa√ßa um consulta de formato de lista na API da TheDogAPI, para buscar imagens aleat√≥rias de cachorros.
#Mostre as informa√ß√µes de forma organizada para o us√°rio

# Importa bibliotecas necess√°rias
import requests
import os
import webbrowser
from dotenv import load_dotenv
from datetime import datetime

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Obt√©m as chaves das APIs do ambiente
CAT_API_KEY = os.getenv('CAT_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# Verifica se as chaves foram carregadas corretamente
if not CAT_API_KEY:
    raise ValueError("A vari√°vel CAT_API_KEY n√£o foi encontrada.")
if not NEWS_API_KEY:
    raise ValueError("A vari√°vel NEWS_API_KEY n√£o foi encontrada.")
if not WEATHER_API_KEY:
    raise ValueError("A vari√°vel WEATHER_API_KEY n√£o foi encontrada.")

# ===================== Fun√ß√£o: Buscar Gatos =====================
def buscar_gatos():
    while True:
        try:
            quantidade = int(input("Quantos gatos voc√™ deseja ver? (m√°x. 5): "))
            if 1 <= quantidade <= 5:
                break
            else:
                print("Digite um n√∫mero entre 1 e 5.")
        except ValueError:
            print("Entrada inv√°lida. Digite um n√∫mero.")

    url = f'https://api.thecatapi.com/v1/images/search?limit={quantidade}&has_breeds=1'
    headers = {'x-api-key': CAT_API_KEY}

    resposta = requests.get(url, headers=headers)

    if resposta.status_code == 200:
        dados = resposta.json()
        print(f"\nüê± Exibindo {quantidade} imagem(ns) de gato(s):\n")

        for indice, item in enumerate(dados, start=1):
            url_imagem = item['url']
            print(f"{indice}. Imagem: {url_imagem}")
            webbrowser.open(url_imagem)

            if 'breeds' in item and item['breeds']:
                raca = item['breeds'][0]
                print(f"   üìå Ra√ßa: {raca.get('name', 'Desconhecida')}")
                print(f"   üß¨ Temperamento: {raca.get('temperament', 'N/A')}")
                print(f"   üåç Origem: {raca.get('origin', 'N/A')}")
                print(f"   üß™ Peso: {raca.get('weight', {}).get('metric', 'N/A')} kg")
                print(f"   ‚è≥ Expectativa de vida: {raca.get('life_span', 'N/A')} anos")
                print(f"   üìñ Wikipedia: {raca.get('wikipedia_url', 'N√£o dispon√≠vel')}\n")
            else:
                print("   ‚ö†Ô∏è Nenhuma informa√ß√£o de ra√ßa dispon√≠vel.\n")
    else:
        print(f"Erro ao buscar gatos: {resposta.status_code}\n")

# ===================== Fun√ß√£o: Buscar Not√≠cias =====================
def buscar_noticias():
    termo = input("Digite um tema para buscar not√≠cias (ex: Python, clima, esportes): ").strip()

    url = "https://newsapi.org/v2/everything"
    headers = {'x-api-key': NEWS_API_KEY}
    parametros = {
        'q': termo,
        'language': 'pt',
        'page': '1',
        'pageSize': 10
    }

    resposta = requests.get(url, headers=headers, params=parametros)

    if resposta.status_code == 200:
        resposta_json = resposta.json()
        artigos = resposta_json.get('articles', [])

        if not artigos:
            print("Nenhuma not√≠cia encontrada para esse tema.")
            return

        print(f"\nüì∞ Exibindo not√≠cias sobre: {termo}\n")
        for artigo in artigos[:10]:
            print(f"T√≠tulo: {artigo['title']}")
            print(f"Descri√ß√£o: {artigo['description']}")
            print(f"Link: {artigo['url']}")
            print("-" * 50)
    else:
        print(f"Erro ao buscar not√≠cias: {resposta.status_code}")

# ===================== Fun√ß√£o: Buscar Clima =====================
def obter_clima(cidade):
    url = 'https://api.openweathermap.org/data/2.5/weather'

    parametros = {
        'q': cidade,
        'appid': WEATHER_API_KEY,
        'units': 'metric',
        'lang': 'pt_br'
    }

    resposta = requests.get(url, params=parametros)

    if resposta.status_code == 200:
        dados = resposta.json()

        estado = dados['sys'].get('state', 'Desconhecido')
        pais = dados['sys']['country']

        if estado == 'Desconhecido' and ',' in cidade:
            estado = cidade.split(',')[1].strip().upper()

        nascer_sol = datetime.utcfromtimestamp(dados['sys']['sunrise']).strftime('%H:%M:%S')
        por_sol = datetime.utcfromtimestamp(dados['sys']['sunset']).strftime('%H:%M:%S')

        print(f"\nüìç Clima atual em {cidade}, {estado} ({pais}):")
        print(f"üå§Ô∏è  Condi√ß√£o: {dados['weather'][0]['description']}")
        print(f"üå°Ô∏è  Temperatura: {dados['main']['temp']}¬∞C (Sensa√ß√£o t√©rmica: {dados['main']['feels_like']}¬∞C)")
        print(f"üíß Umidade: {dados['main']['humidity']}%")
        print(f"üçÉ Vento: {dados['wind']['speed']} m/s")
        print(f"üå¶Ô∏è Nuvens: {dados['clouds']['all']}%")
        print(f"üìä Press√£o: {dados['main']['pressure']} hPa")
        print(f"üåÖ Nascer do sol: {nascer_sol} UTC")
        print(f"üåá P√¥r do sol: {por_sol} UTC")
        print(f"üëÅÔ∏è Visibilidade: {dados['visibility'] / 1000} km\n")
    else:
        print(f"Erro ao consultar o clima para {cidade}. C√≥digo: {resposta.status_code}")

# ===================== Fun√ß√£o: Buscar Clima de M√∫ltiplas Cidades =====================
def buscar_clima():
    cidades = input("Digite as cidades (separadas por v√≠rgula): ").split(",")
    for cidade in cidades:
        cidade = cidade.strip()
        obter_clima(cidade)

# ===================== Menu Principal =====================
while True:
    print("\n========= MENU =========")
    print("1. Ver imagens de gatos üê±")
    print("2. Ver not√≠cias üì∞")
    print("3. Ver clima de cidades üå¶Ô∏è")
    print("4. Sair ‚ùå")
    print("========================")

    escolha = input("Escolha uma op√ß√£o (1-4): ").strip()

    if escolha == '1':
        buscar_gatos()
    elif escolha == '2':
        buscar_noticias()
    elif escolha == '3':
        buscar_clima()
    elif escolha == '4':
        print("Voc√™ escolheu sair. Valeu, Falouuu! üëã")
        break
    else:
        print("Op√ß√£o inv√°lida. Tente novamente.")
